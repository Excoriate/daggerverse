---
name: 🎯 Publish Specific Dagger Module Version

on:
    workflow_dispatch:
        inputs:
            module:
                description: Module to publish (e.g., module-template)
                required: true
            version:
                description: Version to publish (e.g., v0.1.0)
                required: true

env:
    GO_VERSION: ~1.22
    DAG_VERSION: 0.12.4

permissions:
    contents: read
    id-token: write

jobs:
    publish-specific-version:
        runs-on: ubuntu-latest
        steps:
            - name: 📥 Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: 🛠️ Set up environment
              run: |
                  sudo apt-get update
                  sudo apt-get install jq
                  echo "🔧 Environment setup complete"

            - name: 🐳 Install Dagger CLI
              run: |
                  curl -L https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=${{ env.DAG_VERSION }} sh
                  sudo mv bin/dagger /usr/local/bin/
                  dagger version
                  if [[ $(dagger version | grep -oP '(?<=dagger v)\S+') != "${{ env.DAG_VERSION }}" ]]; then
                    echo "::error::❌ Installed Dagger version does not match DAG_VERSION"
                    exit 1
                  fi
                  echo "✅ Dagger CLI installed successfully"

            - name: 🔍 Validate inputs and tag
              id: validate-inputs
              run: |
                  module="${{ github.event.inputs.module }}"
                  version="${{ github.event.inputs.version }}"
                  normalized_module=$(echo "$module" | tr '[:upper:]' '[:lower:]' | tr -d ' ')

                  if [[ ! -d "$normalized_module" ]]; then
                    echo "::error::❌ Module directory not found: $normalized_module"
                    exit 1
                  fi

                  if [[ ! $version =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                    echo "::error::❌ Invalid version format: $version. Expected format: vX.Y.Z"
                    exit 1
                  fi

                  tag="${normalized_module}/${version}"
                  echo "module=$normalized_module" >> $GITHUB_OUTPUT
                  echo "version=$version" >> $GITHUB_OUTPUT
                  echo "tag=$tag" >> $GITHUB_OUTPUT
                  echo "✅ Inputs validated. Module: $normalized_module, Version: $version, Tag: $tag"

            - name: 🐹 Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: 🚀 Publish to Daggerverse
              run: |
                  module="${{ steps.validate-inputs.outputs.module }}"
                  version="${{ steps.validate-inputs.outputs.version }}"
                  tag="${{ steps.validate-inputs.outputs.tag }}"

                  echo "📢 Publishing module: $module with version $version"
                  echo "🏷️ Using tag: $tag"

                  # Fetch all tags and find the correct one
                  git fetch --all --tags --force

                  # Check if the tag exists
                  if ! git rev-parse "refs/tags/$tag" >/dev/null 2>&1; then
                    echo "::error::❌ Tag $tag does not exist in the repository"
                    echo "Available tags:"
                    git tag -l
                    exit 1
                  fi

                  # Checkout the specific tag
                  git checkout "refs/tags/$tag"

                  # Get the current commit hash
                  current_commit=$(git rev-parse HEAD)
                  tag_commit=$(git rev-parse refs/tags/$tag)

                  echo "Current commit: $current_commit"
                  echo "Tag commit: $tag_commit"

                  if [ "$current_commit" != "$tag_commit" ]; then
                    echo "::warning::⚠️ Current commit does not match the tag commit. This might be okay if the tag was moved."
                  fi

                  # Use the tag directly in the publish command
                  if dagger publish -m "$module" "github.com/Excoriate/daggerverse/${module}@${version}"; then
                    echo "✅ Successfully published $module version $version to Daggerverse"
                    echo "🔗 Install with: dagger install github.com/Excoriate/daggerverse/${module}@${version}"
                  else
                    echo "::error::❌ Failed to publish $module version $version"
                    exit 1
                  fi

            - name: 🎉 Publish success notification
              if: success()
              run: |
                  module="${{ steps.validate-inputs.outputs.module }}"
                  version="${{ steps.validate-inputs.outputs.version }}"
                  echo "::notice::🎊 Successfully published ${module}@${version}!"
                  echo "::notice::🔗 Install with: dagger install github.com/Excoriate/daggerverse/${module}@${version}"

            - name: ❌ Notify on failure
              if: failure()
              run: |
                  echo "::error::💥 Failed to publish the module. Please check the logs for details."
