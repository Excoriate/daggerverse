---
name: üéØ Publish Specific Dagger Module Version

on:
    workflow_dispatch:
        inputs:
            module:
                description: Module to publish (e.g., module-template)
                required: true
            version:
                description: Version to publish (e.g., v0.1.0)
                required: true

env:
    GO_VERSION: ~1.22
    DAG_VERSION: 0.12.4

permissions:
    contents: write
    id-token: write

jobs:
    publish-specific-version:
        runs-on: ubuntu-latest
        steps:
            - name: üì• Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: üõ†Ô∏è Set up environment
              run: |
                  sudo apt-get update
                  sudo apt-get install jq
                  curl -L https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=${{ env.DAG_VERSION }} sh
                  sudo mv bin/dagger /usr/local/bin/
                  git config --global user.name 'github-actions[bot]'
                  git config --global user.email 'github-actions[bot]@users.noreply.github.com'
                  echo "üîß Environment setup complete"

            - name: üê≥ Verify Dagger CLI
              run: |
                  dagger version
                  if [[ $(dagger version | grep -oP '(?<=dagger v)\S+') != "${{ env.DAG_VERSION }}" ]]; then
                    echo "::error::‚ùå Installed Dagger version does not match DAG_VERSION"
                    exit 1
                  fi
                  echo "‚úÖ Dagger CLI verified successfully"

            - name: üîç Validate inputs and tag
              id: validate-inputs
              run: |
                  module="${{ github.event.inputs.module }}"
                  version="${{ github.event.inputs.version }}"
                  normalized_module=$(echo "$module" | tr '[:upper:]' '[:lower:]' | tr -d ' ')

                  if [[ ! -d "$normalized_module" ]]; then
                    echo "::error::‚ùå Module directory not found: $normalized_module"
                    exit 1
                  fi

                  if [[ ! $version =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                    echo "::error::‚ùå Invalid version format: $version. Expected format: vX.Y.Z"
                    exit 1
                  fi

                  tag="${normalized_module}/${version}"
                  echo "module=$normalized_module" >> $GITHUB_OUTPUT
                  echo "version=$version" >> $GITHUB_OUTPUT
                  echo "tag=$tag" >> $GITHUB_OUTPUT
                  echo "‚úÖ Inputs validated. Module: $normalized_module, Version: $version, Tag: $tag"

            - name: üêπ Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: üöÄ Publish to Daggerverse
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  module="${{ steps.validate-inputs.outputs.module }}"
                  version="${{ steps.validate-inputs.outputs.version }}"
                  tag="${{ steps.validate-inputs.outputs.tag }}"

                  echo "üì¢ Publishing module: $module with version $version"
                  echo "üè∑Ô∏è Using tag: $tag"

                  # Fetch all tags and find the correct one
                  git fetch --all --tags --force

                  # Check if the tag exists
                  if ! git rev-parse "refs/tags/$tag" >/dev/null 2>&1; then
                    echo "::error::‚ùå Tag $tag does not exist in the repository"
                    echo "Available tags:"
                    git tag -l
                    exit 1
                  fi

                  # Checkout the specific tag
                  git checkout "refs/tags/$tag"

                  # Clean untracked files
                  git clean -fd

                  # Stash any changes
                  git stash --include-untracked

                  # Use the tag directly in the publish command with --force
                  if dagger publish --force -m "$module" "github.com/Excoriate/daggerverse/${module}@${version#v}"; then
                    echo "‚úÖ Successfully published $module version $version to Daggerverse"
                    echo "üîó Install with: dagger install github.com/Excoriate/daggerverse/${module}@${version}"
                  else
                    echo "::error::‚ùå Failed to publish $module version $version"
                    exit 1
                  fi

                  # Pop stashed changes if any
