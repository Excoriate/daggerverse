// Code generated by dagger. DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log/slog"
	"os"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/sdk/resource"
	semconv "go.opentelemetry.io/otel/semconv/v1.24.0"
	"go.opentelemetry.io/otel/trace"

	"Terraform/internal/dagger"
	"Terraform/internal/querybuilder"
	"Terraform/internal/telemetry"
)

var dag = dagger.Connect()

func Tracer() trace.Tracer {
	return otel.Tracer("dagger.io/sdk.go")
}

// used for local MarshalJSON implementations
var marshalCtx = context.Background()

// called by main()
func setMarshalContext(ctx context.Context) {
	marshalCtx = ctx
	dagger.SetMarshalContext(ctx)
}

type DaggerObject = querybuilder.GraphQLMarshaller

type ExecError = dagger.ExecError

// ptr returns a pointer to the given value.
func ptr[T any](v T) *T {
	return &v
}

// convertSlice converts a slice of one type to a slice of another type using a
// converter function
func convertSlice[I any, O any](in []I, f func(I) O) []O {
	out := make([]O, len(in))
	for i, v := range in {
		out[i] = f(v)
	}
	return out
}

func (r Terraform) MarshalJSON() ([]byte, error) {
	var concrete struct {
		Version string
		Image   string
		Src     *any
		BaseCtr *any
	}
	concrete.Version = r.Version
	concrete.Image = r.Image
	concrete.Src = r.Src
	concrete.BaseCtr = r.BaseCtr
	return json.Marshal(&concrete)
}

func (r *Terraform) UnmarshalJSON(bs []byte) error {
	var concrete struct {
		Version string
		Image   string
		Src     *any
		BaseCtr *any
	}
	err := json.Unmarshal(bs, &concrete)
	if err != nil {
		return err
	}
	r.Version = concrete.Version
	r.Image = concrete.Image
	r.Src = concrete.Src
	r.BaseCtr = concrete.BaseCtr
	return nil
}

func main() {
	ctx := context.Background()

	// Direct slog to the new stderr. This is only for dev time debugging, and
	// runtime errors/warnings.
	slog.SetDefault(slog.New(slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{
		Level: slog.LevelWarn,
	})))

	if err := dispatch(ctx); err != nil {
		fmt.Println(err.Error())
		os.Exit(2)
	}
}

func dispatch(ctx context.Context) error {
	ctx = telemetry.InitEmbedded(ctx, resource.NewWithAttributes(
		semconv.SchemaURL,
		semconv.ServiceNameKey.String("dagger-go-sdk"),
		// TODO version?
	))
	defer telemetry.Close()

	// A lot of the "work" actually happens when we're marshalling the return
	// value, which entails getting object IDs, which happens in MarshalJSON,
	// which has no ctx argument, so we use this lovely global variable.
	setMarshalContext(ctx)

	fnCall := dag.CurrentFunctionCall()
	parentName, err := fnCall.ParentName(ctx)
	if err != nil {
		return fmt.Errorf("get parent name: %w", err)
	}
	fnName, err := fnCall.Name(ctx)
	if err != nil {
		return fmt.Errorf("get fn name: %w", err)
	}
	parentJson, err := fnCall.Parent(ctx)
	if err != nil {
		return fmt.Errorf("get fn parent: %w", err)
	}
	fnArgs, err := fnCall.InputArgs(ctx)
	if err != nil {
		return fmt.Errorf("get fn args: %w", err)
	}

	inputArgs := map[string][]byte{}
	for _, fnArg := range fnArgs {
		argName, err := fnArg.Name(ctx)
		if err != nil {
			return fmt.Errorf("get fn arg name: %w", err)
		}
		argValue, err := fnArg.Value(ctx)
		if err != nil {
			return fmt.Errorf("get fn arg value: %w", err)
		}
		inputArgs[argName] = []byte(argValue)
	}

	result, err := invoke(ctx, []byte(parentJson), parentName, fnName, inputArgs)
	if err != nil {
		return fmt.Errorf("invoke: %w", err)
	}
	resultBytes, err := json.Marshal(result)
	if err != nil {
		return fmt.Errorf("marshal: %w", err)
	}
	if err = fnCall.ReturnValue(ctx, dagger.JSON(resultBytes)); err != nil {
		return fmt.Errorf("store return value: %w", err)
	}
	return nil
}
func invoke(ctx context.Context, parentJSON []byte, parentName string, fnName string, inputArgs map[string][]byte) (_ any, err error) {
	_ = inputArgs
	switch parentName {
	case "Terraform":
		switch fnName {
		case "Base":
			var parent Terraform
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Terraform).Base(&parent), nil
		case "WithModule":
			var parent Terraform
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var src *any
			if inputArgs["src"] != nil {
				err = json.Unmarshal([]byte(inputArgs["src"]), &src)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg src", err))
				}
			}
			return (*Terraform).WithModule(&parent, src), nil
		case "WithContainer":
			var parent Terraform
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var ctr *any
			if inputArgs["ctr"] != nil {
				err = json.Unmarshal([]byte(inputArgs["ctr"]), &ctr)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg ctr", err))
				}
			}
			return (*Terraform).WithContainer(&parent, ctr), nil
		case "Init":
			var parent Terraform
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var tfmod string
			if inputArgs["tfmod"] != nil {
				err = json.Unmarshal([]byte(inputArgs["tfmod"]), &tfmod)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg tfmod", err))
				}
			}
			var args string
			if inputArgs["args"] != nil {
				err = json.Unmarshal([]byte(inputArgs["args"]), &args)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg args", err))
				}
			}
			return (*Terraform).Init(&parent, tfmod, args)
		case "Plan":
			var parent Terraform
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var tfmod string
			if inputArgs["tfmod"] != nil {
				err = json.Unmarshal([]byte(inputArgs["tfmod"]), &tfmod)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg tfmod", err))
				}
			}
			var args string
			if inputArgs["args"] != nil {
				err = json.Unmarshal([]byte(inputArgs["args"]), &args)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg args", err))
				}
			}
			var initArgs string
			if inputArgs["initArgs"] != nil {
				err = json.Unmarshal([]byte(inputArgs["initArgs"]), &initArgs)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg initArgs", err))
				}
			}
			return (*Terraform).Plan(&parent, tfmod, args, initArgs)
		case "Apply":
			var parent Terraform
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var tfmod string
			if inputArgs["tfmod"] != nil {
				err = json.Unmarshal([]byte(inputArgs["tfmod"]), &tfmod)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg tfmod", err))
				}
			}
			var args string
			if inputArgs["args"] != nil {
				err = json.Unmarshal([]byte(inputArgs["args"]), &args)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg args", err))
				}
			}
			var initArgs string
			if inputArgs["initArgs"] != nil {
				err = json.Unmarshal([]byte(inputArgs["initArgs"]), &initArgs)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg initArgs", err))
				}
			}
			return (*Terraform).Apply(&parent, tfmod, args, initArgs)
		case "Destroy":
			var parent Terraform
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var tfmod string
			if inputArgs["tfmod"] != nil {
				err = json.Unmarshal([]byte(inputArgs["tfmod"]), &tfmod)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg tfmod", err))
				}
			}
			var args string
			if inputArgs["args"] != nil {
				err = json.Unmarshal([]byte(inputArgs["args"]), &args)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg args", err))
				}
			}
			var initArgs string
			if inputArgs["initArgs"] != nil {
				err = json.Unmarshal([]byte(inputArgs["initArgs"]), &initArgs)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg initArgs", err))
				}
			}
			return (*Terraform).Destroy(&parent, tfmod, args, initArgs)
		case "Validate":
			var parent Terraform
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var tfmod string
			if inputArgs["tfmod"] != nil {
				err = json.Unmarshal([]byte(inputArgs["tfmod"]), &tfmod)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg tfmod", err))
				}
			}
			var args string
			if inputArgs["args"] != nil {
				err = json.Unmarshal([]byte(inputArgs["args"]), &args)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg args", err))
				}
			}
			var initArgs string
			if inputArgs["initArgs"] != nil {
				err = json.Unmarshal([]byte(inputArgs["initArgs"]), &initArgs)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg initArgs", err))
				}
			}
			return (*Terraform).Validate(&parent, tfmod, args, initArgs)
		case "Format":
			var parent Terraform
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var tfmod string
			if inputArgs["tfmod"] != nil {
				err = json.Unmarshal([]byte(inputArgs["tfmod"]), &tfmod)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg tfmod", err))
				}
			}
			var args string
			if inputArgs["args"] != nil {
				err = json.Unmarshal([]byte(inputArgs["args"]), &args)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg args", err))
				}
			}
			return (*Terraform).Format(&parent, tfmod, args)
		case "":
			var parent Terraform
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var version string
			if inputArgs["version"] != nil {
				err = json.Unmarshal([]byte(inputArgs["version"]), &version)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg version", err))
				}
			}
			var image string
			if inputArgs["image"] != nil {
				err = json.Unmarshal([]byte(inputArgs["image"]), &image)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg image", err))
				}
			}
			var src *any
			if inputArgs["src"] != nil {
				err = json.Unmarshal([]byte(inputArgs["src"]), &src)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg src", err))
				}
			}
			var ctr *any
			if inputArgs["ctr"] != nil {
				err = json.Unmarshal([]byte(inputArgs["ctr"]), &ctr)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg ctr", err))
				}
			}
			var envVars string
			if inputArgs["envVars"] != nil {
				err = json.Unmarshal([]byte(inputArgs["envVars"]), &envVars)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg envVars", err))
				}
			}
			return New(version, image, src, ctr, envVars), nil
		default:
			return nil, fmt.Errorf("unknown function %s", fnName)
		}
	case "":
		return dag.Module().
			WithObject(
				dag.TypeDef().WithObject("Terraform", dagger.TypeDefWithObjectOpts{SourceMap: dag.SourceMap("main.go", 20, 6)}).
					WithFunction(
						dag.Function("Base",
							dag.TypeDef().WithObject("Terraform")).
							WithDescription("Base sets up the Container with a Terraform Image and cache volumes").
							WithSourceMap(dag.SourceMap("main.go", 90, 1))).
					WithFunction(
						dag.Function("WithModule",
							dag.TypeDef().WithObject("Terraform")).
							WithDescription("WithModule specifies the module to use in the Terraform module by the 'Src' directory.").
							WithSourceMap(dag.SourceMap("main.go", 102, 1)).
							WithArg("src", dag.TypeDef().WithKind(dagger.TypeDefKindVoidKind).WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("main.go", 102, 32)})).
					WithFunction(
						dag.Function("WithContainer",
							dag.TypeDef().WithObject("Terraform")).
							WithDescription("WithContainer specifies the container to use in the Terraform module.").
							WithSourceMap(dag.SourceMap("main.go", 108, 1)).
							WithArg("ctr", dag.TypeDef().WithKind(dagger.TypeDefKindVoidKind).WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("main.go", 108, 35)})).
					WithFunction(
						dag.Function("Init",
							dag.TypeDef().WithKind(dagger.TypeDefKindVoidKind).WithOptional(true)).
							WithDescription("Init initializes the Terraform module.").
							WithSourceMap(dag.SourceMap("main.go", 123, 1)).
							WithArg("tfmod", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.FunctionWithArgOpts{Description: "The tfmod is the Terraform module to use.", SourceMap: dag.SourceMap("main.go", 125, 2)}).
							WithArg("args", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "args are the n number of arguments to pass to the Terraform init command.", SourceMap: dag.SourceMap("main.go", 128, 2)})).
					WithFunction(
						dag.Function("Plan",
							dag.TypeDef().WithKind(dagger.TypeDefKindVoidKind).WithOptional(true)).
							WithDescription("Plan creates an execution plan for the Terraform module.").
							WithSourceMap(dag.SourceMap("main.go", 137, 1)).
							WithArg("tfmod", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.FunctionWithArgOpts{Description: "The tfmod is the Terraform module to use.", SourceMap: dag.SourceMap("main.go", 139, 2)}).
							WithArg("args", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "args are the n number of arguments to pass to the Terraform plan command.", SourceMap: dag.SourceMap("main.go", 142, 2)}).
							WithArg("initArgs", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "initArgs are the n number of arguments to pass to the Terraform init command.", SourceMap: dag.SourceMap("main.go", 145, 2)})).
					WithFunction(
						dag.Function("Apply",
							dag.TypeDef().WithKind(dagger.TypeDefKindVoidKind).WithOptional(true)).
							WithDescription("Apply creates an execution plan for the Terraform module.").
							WithSourceMap(dag.SourceMap("main.go", 159, 1)).
							WithArg("tfmod", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.FunctionWithArgOpts{Description: "The tfmod is the Terraform module to use.", SourceMap: dag.SourceMap("main.go", 161, 2)}).
							WithArg("args", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "args are the n number of arguments to pass to the Terraform apply command.", SourceMap: dag.SourceMap("main.go", 164, 2)}).
							WithArg("initArgs", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "initArgs are the n number of arguments to pass to the Terraform init command.", SourceMap: dag.SourceMap("main.go", 167, 2)})).
					WithFunction(
						dag.Function("Destroy",
							dag.TypeDef().WithKind(dagger.TypeDefKindVoidKind).WithOptional(true)).
							WithDescription("Destroy creates an execution plan for the Terraform module.").
							WithSourceMap(dag.SourceMap("main.go", 180, 1)).
							WithArg("tfmod", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.FunctionWithArgOpts{Description: "The tfmod is the Terraform module to use.", SourceMap: dag.SourceMap("main.go", 182, 2)}).
							WithArg("args", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "args are the n number of arguments to pass to the Terraform destroy command.", SourceMap: dag.SourceMap("main.go", 185, 2)}).
							WithArg("initArgs", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "initArgs are the n number of arguments to pass to the Terraform init command.", SourceMap: dag.SourceMap("main.go", 188, 2)})).
					WithFunction(
						dag.Function("Validate",
							dag.TypeDef().WithKind(dagger.TypeDefKindVoidKind).WithOptional(true)).
							WithDescription("Validate creates an execution plan for the Terraform module.").
							WithSourceMap(dag.SourceMap("main.go", 201, 1)).
							WithArg("tfmod", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.FunctionWithArgOpts{Description: "The tfmod is the Terraform module to use.", SourceMap: dag.SourceMap("main.go", 203, 2)}).
							WithArg("args", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "args are the n number of arguments to pass to the Terraform validate command.", SourceMap: dag.SourceMap("main.go", 206, 2)}).
							WithArg("initArgs", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "initArgs are the n number of arguments to pass to the Terraform init command.", SourceMap: dag.SourceMap("main.go", 209, 2)})).
					WithFunction(
						dag.Function("Format",
							dag.TypeDef().WithKind(dagger.TypeDefKindVoidKind).WithOptional(true)).
							WithDescription("Format creates an execution plan for the Terraform module.").
							WithSourceMap(dag.SourceMap("main.go", 222, 1)).
							WithArg("tfmod", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.FunctionWithArgOpts{Description: "The tfmod is the Terraform module to use.", SourceMap: dag.SourceMap("main.go", 224, 2)}).
							WithArg("args", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "args are the n number of arguments to pass to the Terraform fmt command.", SourceMap: dag.SourceMap("main.go", 227, 2)})).
					WithField("Version", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.TypeDefWithFieldOpts{Description: "The Version of the Terraform to use, e.g., \"0.12.24\".", SourceMap: dag.SourceMap("main.go", 22, 2)}).
					WithField("Image", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.TypeDefWithFieldOpts{Description: "Image of the container to use.", SourceMap: dag.SourceMap("main.go", 24, 2)}).
					WithField("Src", dag.TypeDef().WithKind(dagger.TypeDefKindVoidKind).WithOptional(true), dagger.TypeDefWithFieldOpts{Description: "Src is the directory that contains all the source code, including the module directory.", SourceMap: dag.SourceMap("main.go", 26, 2)}).
					WithField("BaseCtr", dag.TypeDef().WithKind(dagger.TypeDefKindVoidKind).WithOptional(true), dagger.TypeDefWithFieldOpts{Description: "BaseCtr is the container to use as a base container.", SourceMap: dag.SourceMap("main.go", 28, 2)}).
					WithConstructor(
						dag.Function("New",
							dag.TypeDef().WithObject("Terraform")).
							WithSourceMap(dag.SourceMap("main.go", 31, 1)).
							WithArg("version", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "the Version of the Terraform to use, e.g., \"0.12.24\".\nby default, it uses the latest Version.", SourceMap: dag.SourceMap("main.go", 36, 2), DefaultValue: dagger.JSON("\"latest\"")}).
							WithArg("image", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Image of the container to use.\nby default, it uses the official HashiCorp Terraform Image hashicorp/terraform.", SourceMap: dag.SourceMap("main.go", 42, 2), DefaultValue: dagger.JSON("\"hashicorp/terraform\"")}).
							WithArg("src", dag.TypeDef().WithKind(dagger.TypeDefKindVoidKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Src is the directory that contains all the source code,\nincluding the module directory.", SourceMap: dag.SourceMap("main.go", 46, 2)}).
							WithArg("ctr", dag.TypeDef().WithKind(dagger.TypeDefKindVoidKind).WithOptional(true).WithOptional(true), dagger.FunctionWithArgOpts{Description: "ctr is the container to use as a base container.\nIt's an optional parameter. If it's not set, it's going to create a new container.", SourceMap: dag.SourceMap("main.go", 50, 2)}).
							WithArg("envVars", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "envVars is a string of environment variables in the form of \"key1=value1,key2=value2\"", SourceMap: dag.SourceMap("main.go", 53, 2)}))), nil
	default:
		return nil, fmt.Errorf("unknown object %s", parentName)
	}
}
