// Code generated by dagger. DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log/slog"
	"os"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/sdk/resource"
	semconv "go.opentelemetry.io/otel/semconv/v1.24.0"
	"go.opentelemetry.io/otel/trace"

	"TFLint/internal/dagger"
	"TFLint/internal/querybuilder"
	"TFLint/internal/telemetry"
)

var dag = dagger.Connect()

func Tracer() trace.Tracer {
	return otel.Tracer("dagger.io/sdk.go")
}

// used for local MarshalJSON implementations
var marshalCtx = context.Background()

// called by main()
func setMarshalContext(ctx context.Context) {
	marshalCtx = ctx
	dagger.SetMarshalContext(ctx)
}

type DaggerObject = querybuilder.GraphQLMarshaller

type ExecError = dagger.ExecError

// ptr returns a pointer to the given value.
func ptr[T any](v T) *T {
	return &v
}

// convertSlice converts a slice of one type to a slice of another type using a
// converter function
func convertSlice[I any, O any](in []I, f func(I) O) []O {
	out := make([]O, len(in))
	for i, v := range in {
		out[i] = f(v)
	}
	return out
}

func (r Tflint) MarshalJSON() ([]byte, error) {
	var concrete struct {
		Src *any
		Ctr *any
	}
	concrete.Src = r.Src
	concrete.Ctr = r.Ctr
	return json.Marshal(&concrete)
}

func (r *Tflint) UnmarshalJSON(bs []byte) error {
	var concrete struct {
		Src *any
		Ctr *any
	}
	err := json.Unmarshal(bs, &concrete)
	if err != nil {
		return err
	}
	r.Src = concrete.Src
	r.Ctr = concrete.Ctr
	return nil
}

func main() {
	ctx := context.Background()

	// Direct slog to the new stderr. This is only for dev time debugging, and
	// runtime errors/warnings.
	slog.SetDefault(slog.New(slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{
		Level: slog.LevelWarn,
	})))

	if err := dispatch(ctx); err != nil {
		fmt.Println(err.Error())
		os.Exit(2)
	}
}

func dispatch(ctx context.Context) error {
	ctx = telemetry.InitEmbedded(ctx, resource.NewWithAttributes(
		semconv.SchemaURL,
		semconv.ServiceNameKey.String("dagger-go-sdk"),
		// TODO version?
	))
	defer telemetry.Close()

	// A lot of the "work" actually happens when we're marshalling the return
	// value, which entails getting object IDs, which happens in MarshalJSON,
	// which has no ctx argument, so we use this lovely global variable.
	setMarshalContext(ctx)

	fnCall := dag.CurrentFunctionCall()
	parentName, err := fnCall.ParentName(ctx)
	if err != nil {
		return fmt.Errorf("get parent name: %w", err)
	}
	fnName, err := fnCall.Name(ctx)
	if err != nil {
		return fmt.Errorf("get fn name: %w", err)
	}
	parentJson, err := fnCall.Parent(ctx)
	if err != nil {
		return fmt.Errorf("get fn parent: %w", err)
	}
	fnArgs, err := fnCall.InputArgs(ctx)
	if err != nil {
		return fmt.Errorf("get fn args: %w", err)
	}

	inputArgs := map[string][]byte{}
	for _, fnArg := range fnArgs {
		argName, err := fnArg.Name(ctx)
		if err != nil {
			return fmt.Errorf("get fn arg name: %w", err)
		}
		argValue, err := fnArg.Value(ctx)
		if err != nil {
			return fmt.Errorf("get fn arg value: %w", err)
		}
		inputArgs[argName] = []byte(argValue)
	}

	result, err := invoke(ctx, []byte(parentJson), parentName, fnName, inputArgs)
	if err != nil {
		return fmt.Errorf("invoke: %w", err)
	}
	resultBytes, err := json.Marshal(result)
	if err != nil {
		return fmt.Errorf("marshal: %w", err)
	}
	if err = fnCall.ReturnValue(ctx, dagger.JSON(resultBytes)); err != nil {
		return fmt.Errorf("store return value: %w", err)
	}
	return nil
}
func invoke(ctx context.Context, parentJSON []byte, parentName string, fnName string, inputArgs map[string][]byte) (_ any, err error) {
	_ = inputArgs
	switch parentName {
	case "Tflint":
		switch fnName {
		case "Base":
			var parent Tflint
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var image string
			if inputArgs["image"] != nil {
				err = json.Unmarshal([]byte(inputArgs["image"]), &image)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg image", err))
				}
			}
			var version string
			if inputArgs["version"] != nil {
				err = json.Unmarshal([]byte(inputArgs["version"]), &version)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg version", err))
				}
			}
			return (*Tflint).Base(&parent, image, version), nil
		case "WithSource":
			var parent Tflint
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var src *any
			if inputArgs["src"] != nil {
				err = json.Unmarshal([]byte(inputArgs["src"]), &src)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg src", err))
				}
			}
			return (*Tflint).WithSource(&parent, src), nil
		case "Version":
			var parent Tflint
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Tflint).Version(&parent)
		case "Run":
			var parent Tflint
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var cfg string
			if inputArgs["cfg"] != nil {
				err = json.Unmarshal([]byte(inputArgs["cfg"]), &cfg)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg cfg", err))
				}
			}
			var args string
			if inputArgs["args"] != nil {
				err = json.Unmarshal([]byte(inputArgs["args"]), &args)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg args", err))
				}
			}
			return (*Tflint).Run(&parent, cfg, args)
		case "WithInit":
			var parent Tflint
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var cfg string
			if inputArgs["cfg"] != nil {
				err = json.Unmarshal([]byte(inputArgs["cfg"]), &cfg)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg cfg", err))
				}
			}
			var args string
			if inputArgs["args"] != nil {
				err = json.Unmarshal([]byte(inputArgs["args"]), &args)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg args", err))
				}
			}
			return (*Tflint).WithInit(&parent, cfg, args), nil
		case "RunInit":
			var parent Tflint
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var cfg string
			if inputArgs["cfg"] != nil {
				err = json.Unmarshal([]byte(inputArgs["cfg"]), &cfg)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg cfg", err))
				}
			}
			var args string
			if inputArgs["args"] != nil {
				err = json.Unmarshal([]byte(inputArgs["args"]), &args)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg args", err))
				}
			}
			return (*Tflint).RunInit(&parent, cfg, args)
		case "Lint":
			var parent Tflint
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var init bool
			if inputArgs["init"] != nil {
				err = json.Unmarshal([]byte(inputArgs["init"]), &init)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg init", err))
				}
			}
			var cfg string
			if inputArgs["cfg"] != nil {
				err = json.Unmarshal([]byte(inputArgs["cfg"]), &cfg)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg cfg", err))
				}
			}
			var args string
			if inputArgs["args"] != nil {
				err = json.Unmarshal([]byte(inputArgs["args"]), &args)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg args", err))
				}
			}
			return (*Tflint).Lint(&parent, init, cfg, args), nil
		case "RunLint":
			var parent Tflint
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var init bool
			if inputArgs["init"] != nil {
				err = json.Unmarshal([]byte(inputArgs["init"]), &init)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg init", err))
				}
			}
			var cfg string
			if inputArgs["cfg"] != nil {
				err = json.Unmarshal([]byte(inputArgs["cfg"]), &cfg)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg cfg", err))
				}
			}
			var args string
			if inputArgs["args"] != nil {
				err = json.Unmarshal([]byte(inputArgs["args"]), &args)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg args", err))
				}
			}
			return (*Tflint).RunLint(&parent, init, cfg, args)
		case "":
			var parent Tflint
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var version string
			if inputArgs["version"] != nil {
				err = json.Unmarshal([]byte(inputArgs["version"]), &version)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg version", err))
				}
			}
			var image string
			if inputArgs["image"] != nil {
				err = json.Unmarshal([]byte(inputArgs["image"]), &image)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg image", err))
				}
			}
			var src *any
			if inputArgs["src"] != nil {
				err = json.Unmarshal([]byte(inputArgs["src"]), &src)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg src", err))
				}
			}
			var ctr *any
			if inputArgs["ctr"] != nil {
				err = json.Unmarshal([]byte(inputArgs["ctr"]), &ctr)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg ctr", err))
				}
			}
			return New(version, image, src, ctr), nil
		default:
			return nil, fmt.Errorf("unknown function %s", fnName)
		}
	case "":
		return dag.Module().
			WithObject(
				dag.TypeDef().WithObject("Tflint", dagger.TypeDefWithObjectOpts{SourceMap: dag.SourceMap("main.go", 14, 6)}).
					WithFunction(
						dag.Function("Base",
							dag.TypeDef().WithObject("Tflint")).
							WithDescription("Base sets the base image and version, and creates the base container.").
							WithSourceMap(dag.SourceMap("main.go", 53, 1)).
							WithArg("image", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("main.go", 53, 23)}).
							WithArg("version", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("main.go", 53, 30)})).
					WithFunction(
						dag.Function("WithSource",
							dag.TypeDef().WithObject("Tflint")).
							WithDescription("WithSource sets the source directory if it's passed, and\nmounts the source directory to the container.").
							WithSourceMap(dag.SourceMap("main.go", 74, 1)).
							WithArg("src", dag.TypeDef().WithKind(dagger.TypeDefKindVoidKind).WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("main.go", 74, 29)})).
					WithFunction(
						dag.Function("Version",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Version runs the 'tflint --version' command.").
							WithSourceMap(dag.SourceMap("main.go", 85, 1))).
					WithFunction(
						dag.Function("Run",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Run executes any tflint command.").
							WithSourceMap(dag.SourceMap("main.go", 95, 1)).
							WithArg("cfg", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "cfg is the configuration file to use.", SourceMap: dag.SourceMap("main.go", 98, 2)}).
							WithArg("args", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "args is the arguments to pass to the tfLint command.", SourceMap: dag.SourceMap("main.go", 101, 2)})).
					WithFunction(
						dag.Function("WithInit",
							dag.TypeDef().WithObject("Tflint")).
							WithDescription("WithInit adds the 'init' command to the container.").
							WithSourceMap(dag.SourceMap("main.go", 118, 1)).
							WithArg("cfg", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "cfg is the configuration file to use.", SourceMap: dag.SourceMap("main.go", 121, 2)}).
							WithArg("args", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "args is the arguments to pass to the tfLint init command.", SourceMap: dag.SourceMap("main.go", 124, 2)})).
					WithFunction(
						dag.Function("RunInit",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("RunInit executes the 'init' command.").
							WithSourceMap(dag.SourceMap("main.go", 138, 1)).
							WithArg("cfg", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "cfg is the configuration file to use.", SourceMap: dag.SourceMap("main.go", 141, 2)}).
							WithArg("args", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "args is the arguments to pass to the tfLint init command.", SourceMap: dag.SourceMap("main.go", 144, 2)})).
					WithFunction(
						dag.Function("Lint",
							dag.TypeDef().WithObject("Tflint")).
							WithSourceMap(dag.SourceMap("main.go", 161, 1)).
							WithArg("init", dag.TypeDef().WithKind(dagger.TypeDefKindBooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "init specifies whether to run the 'init' command before running the 'lint' command.", SourceMap: dag.SourceMap("main.go", 165, 2), DefaultValue: dagger.JSON("false")}).
							WithArg("cfg", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "cfg is the configuration file to use.", SourceMap: dag.SourceMap("main.go", 168, 2)}).
							WithArg("args", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "args is the arguments to pass to the tfLint init command.", SourceMap: dag.SourceMap("main.go", 171, 2)})).
					WithFunction(
						dag.Function("RunLint",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("RunLint executes the 'init' command.\nIt's equivalent to running 'tflint' in the terminal.").
							WithSourceMap(dag.SourceMap("main.go", 192, 1)).
							WithArg("init", dag.TypeDef().WithKind(dagger.TypeDefKindBooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "init specifies whether to run the 'init' command before running the 'lint' command.", SourceMap: dag.SourceMap("main.go", 196, 2), DefaultValue: dagger.JSON("false")}).
							WithArg("cfg", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "cfg is the configuration file to use.", SourceMap: dag.SourceMap("main.go", 199, 2)}).
							WithArg("args", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "args is the arguments to pass to the tfLint init command.", SourceMap: dag.SourceMap("main.go", 202, 2)})).
					WithField("Src", dag.TypeDef().WithKind(dagger.TypeDefKindVoidKind).WithOptional(true), dagger.TypeDefWithFieldOpts{Description: "Src is the directory that contains all the source code, including the module directory.", SourceMap: dag.SourceMap("main.go", 16, 2)}).
					WithField("Ctr", dag.TypeDef().WithKind(dagger.TypeDefKindVoidKind).WithOptional(true), dagger.TypeDefWithFieldOpts{Description: "Ctr is the container to use as a base container.", SourceMap: dag.SourceMap("main.go", 19, 2)}).
					WithConstructor(
						dag.Function("New",
							dag.TypeDef().WithObject("Tflint")).
							WithSourceMap(dag.SourceMap("main.go", 22, 1)).
							WithArg("version", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "version is the version of the TFLint to use, e.g., \"v0.50.3\". For more information, see https://github.com/terraform-linters/tflint", SourceMap: dag.SourceMap("main.go", 26, 2), DefaultValue: dagger.JSON("\"v0.50.3\"")}).
							WithArg("image", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "image is the image to use as the base container.", SourceMap: dag.SourceMap("main.go", 30, 2), DefaultValue: dagger.JSON("\"ghcr.io/terraform-linters/tflint\"")}).
							WithArg("src", dag.TypeDef().WithKind(dagger.TypeDefKindVoidKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "src is the directory that contains all the source code, including the module directory.", SourceMap: dag.SourceMap("main.go", 32, 2)}).
							WithArg("ctr", dag.TypeDef().WithKind(dagger.TypeDefKindVoidKind).WithOptional(true).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Ctrl is the container to use as a base container.", SourceMap: dag.SourceMap("main.go", 35, 2)}))), nil
	default:
		return nil, fmt.Errorf("unknown object %s", parentName)
	}
}
