// Code generated by dagger. DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log/slog"
	"os"

	"github.com/excoriate/daggerverse/gotest/internal/dagger"
	"github.com/excoriate/daggerverse/gotest/internal/telemetry"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/sdk/resource"
	semconv "go.opentelemetry.io/otel/semconv/v1.4.0"
	"go.opentelemetry.io/otel/trace"
)

var dag = dagger.Connect()

func Tracer() trace.Tracer {
	return otel.Tracer("dagger.io/sdk.go")
}

// used for local MarshalJSON implementations
var marshalCtx = context.Background()

// called by main()
func setMarshalContext(ctx context.Context) {
	marshalCtx = ctx
	dagger.SetMarshalContext(ctx)
}

type DaggerObject = dagger.DaggerObject

type ExecError = dagger.ExecError

// ptr returns a pointer to the given value.
func ptr[T any](v T) *T {
	return &v
}

// convertSlice converts a slice of one type to a slice of another type using a
// converter function
func convertSlice[I any, O any](in []I, f func(I) O) []O {
	out := make([]O, len(in))
	for i, v := range in {
		out[i] = f(v)
	}
	return out
}

func (r Gotest) MarshalJSON() ([]byte, error) {
	var concrete struct {
		Src *dagger.Directory
		Ctr *dagger.Container
	}
	concrete.Src = r.Src
	concrete.Ctr = r.Ctr
	return json.Marshal(&concrete)
}

func (r *Gotest) UnmarshalJSON(bs []byte) error {
	var concrete struct {
		Src *dagger.Directory
		Ctr *dagger.Container
	}
	err := json.Unmarshal(bs, &concrete)
	if err != nil {
		return err
	}
	r.Src = concrete.Src
	r.Ctr = concrete.Ctr
	return nil
}

func main() {
	ctx := context.Background()

	// Direct slog to the new stderr. This is only for dev time debugging, and
	// runtime errors/warnings.
	slog.SetDefault(slog.New(slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{
		Level: slog.LevelWarn,
	})))

	if err := dispatch(ctx); err != nil {
		fmt.Println(err.Error())
		os.Exit(2)
	}
}

func dispatch(ctx context.Context) error {
	ctx = telemetry.InitEmbedded(ctx, resource.NewWithAttributes(
		semconv.SchemaURL,
		semconv.ServiceNameKey.String("dagger-go-sdk"),
		// TODO version?
	))
	defer telemetry.Close()

	// A lot of the "work" actually happens when we're marshalling the return
	// value, which entails getting object IDs, which happens in MarshalJSON,
	// which has no ctx argument, so we use this lovely global variable.
	setMarshalContext(ctx)

	fnCall := dag.CurrentFunctionCall()
	parentName, err := fnCall.ParentName(ctx)
	if err != nil {
		return fmt.Errorf("get parent name: %w", err)
	}
	fnName, err := fnCall.Name(ctx)
	if err != nil {
		return fmt.Errorf("get fn name: %w", err)
	}
	parentJson, err := fnCall.Parent(ctx)
	if err != nil {
		return fmt.Errorf("get fn parent: %w", err)
	}
	fnArgs, err := fnCall.InputArgs(ctx)
	if err != nil {
		return fmt.Errorf("get fn args: %w", err)
	}

	inputArgs := map[string][]byte{}
	for _, fnArg := range fnArgs {
		argName, err := fnArg.Name(ctx)
		if err != nil {
			return fmt.Errorf("get fn arg name: %w", err)
		}
		argValue, err := fnArg.Value(ctx)
		if err != nil {
			return fmt.Errorf("get fn arg value: %w", err)
		}
		inputArgs[argName] = []byte(argValue)
	}

	result, err := invoke(ctx, []byte(parentJson), parentName, fnName, inputArgs)
	if err != nil {
		return fmt.Errorf("invoke: %w", err)
	}
	resultBytes, err := json.Marshal(result)
	if err != nil {
		return fmt.Errorf("marshal: %w", err)
	}
	if err = fnCall.ReturnValue(ctx, dagger.JSON(resultBytes)); err != nil {
		return fmt.Errorf("store return value: %w", err)
	}
	return nil
}
func invoke(ctx context.Context, parentJSON []byte, parentName string, fnName string, inputArgs map[string][]byte) (_ any, err error) {
	_ = inputArgs
	switch parentName {
	case "Gotest":
		switch fnName {
		case "Base":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var imageUrl string
			if inputArgs["imageURL"] != nil {
				err = json.Unmarshal([]byte(inputArgs["imageURL"]), &imageUrl)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg imageURL", err))
				}
			}
			return (*Gotest).Base(&parent, imageUrl), nil
		case "RunGoTest":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var src *dagger.Directory
			if inputArgs["src"] != nil {
				err = json.Unmarshal([]byte(inputArgs["src"]), &src)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg src", err))
				}
			}
			var packages []string
			if inputArgs["packages"] != nil {
				err = json.Unmarshal([]byte(inputArgs["packages"]), &packages)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg packages", err))
				}
			}
			var enableVerbose bool
			if inputArgs["enableVerbose"] != nil {
				err = json.Unmarshal([]byte(inputArgs["enableVerbose"]), &enableVerbose)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg enableVerbose", err))
				}
			}
			var race bool
			if inputArgs["race"] != nil {
				err = json.Unmarshal([]byte(inputArgs["race"]), &race)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg race", err))
				}
			}
			var testFlags []string
			if inputArgs["testFlags"] != nil {
				err = json.Unmarshal([]byte(inputArgs["testFlags"]), &testFlags)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg testFlags", err))
				}
			}
			var insecureRootCapabilities bool
			if inputArgs["insecureRootCapabilities"] != nil {
				err = json.Unmarshal([]byte(inputArgs["insecureRootCapabilities"]), &insecureRootCapabilities)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg insecureRootCapabilities", err))
				}
			}
			var nest bool
			if inputArgs["nest"] != nil {
				err = json.Unmarshal([]byte(inputArgs["nest"]), &nest)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg nest", err))
				}
			}
			var enableCache bool
			if inputArgs["enableCache"] != nil {
				err = json.Unmarshal([]byte(inputArgs["enableCache"]), &enableCache)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg enableCache", err))
				}
			}
			var envVars []string
			if inputArgs["envVars"] != nil {
				err = json.Unmarshal([]byte(inputArgs["envVars"]), &envVars)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg envVars", err))
				}
			}
			var printEnvVars bool
			if inputArgs["printEnvVars"] != nil {
				err = json.Unmarshal([]byte(inputArgs["printEnvVars"]), &printEnvVars)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg printEnvVars", err))
				}
			}
			return (*Gotest).RunGoTest(&parent, src, packages, enableVerbose, race, testFlags, insecureRootCapabilities, nest, enableCache, envVars, printEnvVars)
		case "RunGoTestSum":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var src *dagger.Directory
			if inputArgs["src"] != nil {
				err = json.Unmarshal([]byte(inputArgs["src"]), &src)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg src", err))
				}
			}
			var packages []string
			if inputArgs["packages"] != nil {
				err = json.Unmarshal([]byte(inputArgs["packages"]), &packages)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg packages", err))
				}
			}
			var testFlags []string
			if inputArgs["testFlags"] != nil {
				err = json.Unmarshal([]byte(inputArgs["testFlags"]), &testFlags)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg testFlags", err))
				}
			}
			var goTestSumFlags []string
			if inputArgs["goTestSumFlags"] != nil {
				err = json.Unmarshal([]byte(inputArgs["goTestSumFlags"]), &goTestSumFlags)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg goTestSumFlags", err))
				}
			}
			var format string
			if inputArgs["format"] != nil {
				err = json.Unmarshal([]byte(inputArgs["format"]), &format)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg format", err))
				}
			}
			var insecureRootCapabilities bool
			if inputArgs["insecureRootCapabilities"] != nil {
				err = json.Unmarshal([]byte(inputArgs["insecureRootCapabilities"]), &insecureRootCapabilities)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg insecureRootCapabilities", err))
				}
			}
			var enableNest bool
			if inputArgs["enableNest"] != nil {
				err = json.Unmarshal([]byte(inputArgs["enableNest"]), &enableNest)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg enableNest", err))
				}
			}
			var enableCache bool
			if inputArgs["enableCache"] != nil {
				err = json.Unmarshal([]byte(inputArgs["enableCache"]), &enableCache)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg enableCache", err))
				}
			}
			var enablePretty bool
			if inputArgs["enablePretty"] != nil {
				err = json.Unmarshal([]byte(inputArgs["enablePretty"]), &enablePretty)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg enablePretty", err))
				}
			}
			var envVars []string
			if inputArgs["envVars"] != nil {
				err = json.Unmarshal([]byte(inputArgs["envVars"]), &envVars)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg envVars", err))
				}
			}
			var printEnvVars bool
			if inputArgs["printEnvVars"] != nil {
				err = json.Unmarshal([]byte(inputArgs["printEnvVars"]), &printEnvVars)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg printEnvVars", err))
				}
			}
			return (*Gotest).RunGoTestSum(&parent, src, packages, testFlags, goTestSumFlags, format, insecureRootCapabilities, enableNest, enableCache, enablePretty, envVars, printEnvVars)
		case "WithSource":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var src *dagger.Directory
			if inputArgs["src"] != nil {
				err = json.Unmarshal([]byte(inputArgs["src"]), &src)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg src", err))
				}
			}
			var workdir string
			if inputArgs["workdir"] != nil {
				err = json.Unmarshal([]byte(inputArgs["workdir"]), &workdir)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg workdir", err))
				}
			}
			return (*Gotest).WithSource(&parent, src, workdir), nil
		case "WithPlatform":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var platform dagger.Platform
			if inputArgs["platform"] != nil {
				err = json.Unmarshal([]byte(inputArgs["platform"]), &platform)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg platform", err))
				}
			}
			return (*Gotest).WithPlatform(&parent, platform), nil
		case "WithCgoEnabled":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Gotest).WithCgoEnabled(&parent), nil
		case "WithCgoDisabled":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Gotest).WithCgoDisabled(&parent), nil
		case "WithEnvironmentVariable":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var name string
			if inputArgs["name"] != nil {
				err = json.Unmarshal([]byte(inputArgs["name"]), &name)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg name", err))
				}
			}
			var value string
			if inputArgs["value"] != nil {
				err = json.Unmarshal([]byte(inputArgs["value"]), &value)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg value", err))
				}
			}
			var expand bool
			if inputArgs["expand"] != nil {
				err = json.Unmarshal([]byte(inputArgs["expand"]), &expand)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg expand", err))
				}
			}
			return (*Gotest).WithEnvironmentVariable(&parent, name, value, expand), nil
		case "WithModuleCache":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Gotest).WithModuleCache(&parent), nil
		case "WithBuildCache":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Gotest).WithBuildCache(&parent), nil
		case "WithGoCache":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Gotest).WithGoCache(&parent), nil
		case "WithNewNetrcFileGitHub":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var username string
			if inputArgs["username"] != nil {
				err = json.Unmarshal([]byte(inputArgs["username"]), &username)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg username", err))
				}
			}
			var password string
			if inputArgs["password"] != nil {
				err = json.Unmarshal([]byte(inputArgs["password"]), &password)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg password", err))
				}
			}
			return (*Gotest).WithNewNetrcFileGitHub(&parent, username, password), nil
		case "WithNewNetrcFileAsSecretGitHub":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var username string
			if inputArgs["username"] != nil {
				err = json.Unmarshal([]byte(inputArgs["username"]), &username)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg username", err))
				}
			}
			var password *dagger.Secret
			if inputArgs["password"] != nil {
				err = json.Unmarshal([]byte(inputArgs["password"]), &password)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg password", err))
				}
			}
			return (*Gotest).WithNewNetrcFileAsSecretGitHub(&parent, username, password), nil
		case "WithNewNetrcFileGitLab":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var username string
			if inputArgs["username"] != nil {
				err = json.Unmarshal([]byte(inputArgs["username"]), &username)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg username", err))
				}
			}
			var password string
			if inputArgs["password"] != nil {
				err = json.Unmarshal([]byte(inputArgs["password"]), &password)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg password", err))
				}
			}
			return (*Gotest).WithNewNetrcFileGitLab(&parent, username, password), nil
		case "WithNewNetrcFileAsSecretGitLab":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var username string
			if inputArgs["username"] != nil {
				err = json.Unmarshal([]byte(inputArgs["username"]), &username)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg username", err))
				}
			}
			var password *dagger.Secret
			if inputArgs["password"] != nil {
				err = json.Unmarshal([]byte(inputArgs["password"]), &password)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg password", err))
				}
			}
			return (*Gotest).WithNewNetrcFileAsSecretGitLab(&parent, username, password), nil
		case "WithPrivateGoPkg":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var privateHost string
			if inputArgs["privateHost"] != nil {
				err = json.Unmarshal([]byte(inputArgs["privateHost"]), &privateHost)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg privateHost", err))
				}
			}
			return (*Gotest).WithPrivateGoPkg(&parent, privateHost), nil
		case "WithGCCCompiler":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Gotest).WithGCCCompiler(&parent), nil
		case "WithGoTestSum":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Gotest).WithGoTestSum(&parent), nil
		case "WithGitInstalled":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Gotest).WithGitInstalled(&parent), nil
		case "SetupGoTest":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var src *dagger.Directory
			if inputArgs["src"] != nil {
				err = json.Unmarshal([]byte(inputArgs["src"]), &src)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg src", err))
				}
			}
			var packages []string
			if inputArgs["packages"] != nil {
				err = json.Unmarshal([]byte(inputArgs["packages"]), &packages)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg packages", err))
				}
			}
			var enableVerbose bool
			if inputArgs["enableVerbose"] != nil {
				err = json.Unmarshal([]byte(inputArgs["enableVerbose"]), &enableVerbose)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg enableVerbose", err))
				}
			}
			var race bool
			if inputArgs["race"] != nil {
				err = json.Unmarshal([]byte(inputArgs["race"]), &race)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg race", err))
				}
			}
			var testFlags []string
			if inputArgs["testFlags"] != nil {
				err = json.Unmarshal([]byte(inputArgs["testFlags"]), &testFlags)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg testFlags", err))
				}
			}
			var insecureRootCapabilities bool
			if inputArgs["insecureRootCapabilities"] != nil {
				err = json.Unmarshal([]byte(inputArgs["insecureRootCapabilities"]), &insecureRootCapabilities)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg insecureRootCapabilities", err))
				}
			}
			var enableNest bool
			if inputArgs["enableNest"] != nil {
				err = json.Unmarshal([]byte(inputArgs["enableNest"]), &enableNest)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg enableNest", err))
				}
			}
			var enableCache bool
			if inputArgs["enableCache"] != nil {
				err = json.Unmarshal([]byte(inputArgs["enableCache"]), &enableCache)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg enableCache", err))
				}
			}
			var envVars []string
			if inputArgs["envVars"] != nil {
				err = json.Unmarshal([]byte(inputArgs["envVars"]), &envVars)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg envVars", err))
				}
			}
			var printEnvVars bool
			if inputArgs["printEnvVars"] != nil {
				err = json.Unmarshal([]byte(inputArgs["printEnvVars"]), &printEnvVars)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg printEnvVars", err))
				}
			}
			return (*Gotest).SetupGoTest(&parent, src, packages, enableVerbose, race, testFlags, insecureRootCapabilities, enableNest, enableCache, envVars, printEnvVars)
		case "SetupGoTestSum":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var src *dagger.Directory
			if inputArgs["src"] != nil {
				err = json.Unmarshal([]byte(inputArgs["src"]), &src)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg src", err))
				}
			}
			var packages []string
			if inputArgs["packages"] != nil {
				err = json.Unmarshal([]byte(inputArgs["packages"]), &packages)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg packages", err))
				}
			}
			var testFlags []string
			if inputArgs["testFlags"] != nil {
				err = json.Unmarshal([]byte(inputArgs["testFlags"]), &testFlags)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg testFlags", err))
				}
			}
			var goTestSumFlags []string
			if inputArgs["goTestSumFlags"] != nil {
				err = json.Unmarshal([]byte(inputArgs["goTestSumFlags"]), &goTestSumFlags)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg goTestSumFlags", err))
				}
			}
			var format string
			if inputArgs["format"] != nil {
				err = json.Unmarshal([]byte(inputArgs["format"]), &format)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg format", err))
				}
			}
			var insecureRootCapabilities bool
			if inputArgs["insecureRootCapabilities"] != nil {
				err = json.Unmarshal([]byte(inputArgs["insecureRootCapabilities"]), &insecureRootCapabilities)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg insecureRootCapabilities", err))
				}
			}
			var enableNest bool
			if inputArgs["enableNest"] != nil {
				err = json.Unmarshal([]byte(inputArgs["enableNest"]), &enableNest)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg enableNest", err))
				}
			}
			var enableCache bool
			if inputArgs["enableCache"] != nil {
				err = json.Unmarshal([]byte(inputArgs["enableCache"]), &enableCache)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg enableCache", err))
				}
			}
			var enablePretty bool
			if inputArgs["enablePretty"] != nil {
				err = json.Unmarshal([]byte(inputArgs["enablePretty"]), &enablePretty)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg enablePretty", err))
				}
			}
			var envVars []string
			if inputArgs["envVars"] != nil {
				err = json.Unmarshal([]byte(inputArgs["envVars"]), &envVars)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg envVars", err))
				}
			}
			var printEnvVars bool
			if inputArgs["printEnvVars"] != nil {
				err = json.Unmarshal([]byte(inputArgs["printEnvVars"]), &printEnvVars)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg printEnvVars", err))
				}
			}
			return (*Gotest).SetupGoTestSum(&parent, src, packages, testFlags, goTestSumFlags, format, insecureRootCapabilities, enableNest, enableCache, enablePretty, envVars, printEnvVars)
		case "":
			var parent Gotest
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var version string
			if inputArgs["version"] != nil {
				err = json.Unmarshal([]byte(inputArgs["version"]), &version)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg version", err))
				}
			}
			var image string
			if inputArgs["image"] != nil {
				err = json.Unmarshal([]byte(inputArgs["image"]), &image)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg image", err))
				}
			}
			var ctr *dagger.Container
			if inputArgs["ctr"] != nil {
				err = json.Unmarshal([]byte(inputArgs["ctr"]), &ctr)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg ctr", err))
				}
			}
			var envVarsFromHost string
			if inputArgs["envVarsFromHost"] != nil {
				err = json.Unmarshal([]byte(inputArgs["envVarsFromHost"]), &envVarsFromHost)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg envVarsFromHost", err))
				}
			}
			return New(version, image, ctr, envVarsFromHost)
		default:
			return nil, fmt.Errorf("unknown function %s", fnName)
		}
	case "":
		return dag.Module().
			WithObject(
				dag.TypeDef().WithObject("Gotest", dagger.TypeDefWithObjectOpts{Description: "Gotest is a module that provides functionality to run Go tests.\n\nThe module can be used to run tests in a Go project."}).
					WithFunction(
						dag.Function("Base",
							dag.TypeDef().WithObject("Gotest")).
							WithDescription("Base sets the base image and version, and creates the base container.\nThe default image is \"golang/alpine\" and the default version is \"latest\".").
							WithArg("imageURL", dag.TypeDef().WithKind(dagger.StringKind))).
					WithFunction(
						dag.Function("RunGoTest",
							dag.TypeDef().WithKind(dagger.StringKind)).
							WithDescription("RunGoTest runs tests using the go test CLI.\nThe default packages to test are \"./...\".").
							WithArg("src", dag.TypeDef().WithObject("Directory"), dagger.FunctionWithArgOpts{Description: "The directory containing code to test."}).
							WithArg("packages", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.StringKind)).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Packages to test."}).
							WithArg("enableVerbose", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "enableVerbose is a flag to run tests with -v."}).
							WithArg("race", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "race is a flag to run tests with"}).
							WithArg("testFlags", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.StringKind)).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Arbitrary flags to pass along to go test."}).
							WithArg("insecureRootCapabilities", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Whether to run tests insecurely, i.e. with special privileges."}).
							WithArg("nest", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Enable experimental Dagger nesting."}).
							WithArg("enableCache", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "enableCache is a flag to enable cache volumes."}).
							WithArg("envVars", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.StringKind)).WithOptional(true)).
							WithArg("printEnvVars", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "printEnvVars is a flag to print the environment variables"})).
					WithFunction(
						dag.Function("RunGoTestSum",
							dag.TypeDef().WithKind(dagger.StringKind)).
							WithDescription("RunGoTestSum runs tests using the gotestsum CLI.").
							WithArg("src", dag.TypeDef().WithObject("Directory"), dagger.FunctionWithArgOpts{Description: "The directory containing code to test."}).
							WithArg("packages", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.StringKind)).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Packages to test."}).
							WithArg("testFlags", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.StringKind)).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Arbitrary flags to pass along to go test."}).
							WithArg("goTestSumFlags", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.StringKind)).WithOptional(true), dagger.FunctionWithArgOpts{Description: "goTestSumFlags is a flag to pass along to go test -json."}).
							WithArg("format", dag.TypeDef().WithKind(dagger.StringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "format defines the option for the GoTestsum format to display"}).
							WithArg("insecureRootCapabilities", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Whether to run tests insecurely, i.e. with special privileges."}).
							WithArg("enableNest", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Enable experimental Dagger nesting. It sets the ExperimentalPrivilegedNesting option in Dagger."}).
							WithArg("enableCache", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "enableCache is a flag to enable cache volumes. If it's set, it'll\nenable the cache volumes for the Go module and build cache."}).
							WithArg("enablePretty", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "enablePretty is a flag to enable pretty output."}).
							WithArg("envVars", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.StringKind)).WithOptional(true), dagger.FunctionWithArgOpts{Description: "envVars list of environment variables to set in the container with format \"SOMETHING=SOMETHING,SOMETHING=SOMETHING\"."}).
							WithArg("printEnvVars", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "printEnvVars is a flag to print the environment variables"})).
					WithFunction(
						dag.Function("WithSource",
							dag.TypeDef().WithObject("Gotest")).
							WithDescription("WithSource Set the source directory.").
							WithArg("src", dag.TypeDef().WithObject("Directory"), dagger.FunctionWithArgOpts{Description: "Src is the directory that contains all the source code, including the module directory."}).
							WithArg("workdir", dag.TypeDef().WithKind(dagger.StringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "workdir is the working directory."})).
					WithFunction(
						dag.Function("WithPlatform",
							dag.TypeDef().WithObject("Gotest")).
							WithDescription("WithPlatform Set GOOS, GOARCH and GOARM environment variables.").
							WithArg("platform", dag.TypeDef().WithScalar("Platform"), dagger.FunctionWithArgOpts{Description: "Target platform in \"[os]/[platform]/[version]\" format (e.g., \"darwin/arm64/v7\", \"windows/amd64\", \"linux/arm64\")."})).
					WithFunction(
						dag.Function("WithCgoEnabled",
							dag.TypeDef().WithObject("Gotest")).
							WithDescription("WithCgoEnabled Set CGO_ENABLED environment variable to 1.")).
					WithFunction(
						dag.Function("WithCgoDisabled",
							dag.TypeDef().WithObject("Gotest")).
							WithDescription("WithCgoDisabled Set CGO_ENABLED environment variable to 0.")).
					WithFunction(
						dag.Function("WithEnvironmentVariable",
							dag.TypeDef().WithObject("Gotest")).
							WithDescription("WithEnvironmentVariable Set an environment variable.").
							WithArg("name", dag.TypeDef().WithKind(dagger.StringKind), dagger.FunctionWithArgOpts{Description: "The name of the environment variable (e.g., \"HOST\")."}).
							WithArg("value", dag.TypeDef().WithKind(dagger.StringKind), dagger.FunctionWithArgOpts{Description: "The value of the environment variable (e.g., \"localhost\")."}).
							WithArg("expand", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Replace `${VAR}` or $VAR in the value according to the current environment\nvariables defined in the container (e.g., \"/opt/bin:$PATH\")."})).
					WithFunction(
						dag.Function("WithModuleCache",
							dag.TypeDef().WithObject("Gotest")).
							WithDescription("WithModuleCache sets the module cache for the Go module.\nThe default cache volume is \"godmodcache\", and the default mount path is \"/go/pkg/mod\".")).
					WithFunction(
						dag.Function("WithBuildCache",
							dag.TypeDef().WithObject("Gotest")).
							WithDescription("WithBuildCache sets the build cache for the Go module.\nThe default cache volume is \"gobuildcache\", and the default mount path is \"/go/build-cache\".")).
					WithFunction(
						dag.Function("WithGoCache",
							dag.TypeDef().WithObject("Gotest")).
							WithDescription("WithGoCache mounts the Go cache directories.")).
					WithFunction(
						dag.Function("WithNewNetrcFileGitHub",
							dag.TypeDef().WithObject("Gotest")).
							WithDescription("WithNewNetrcFileGitHub creates a new .netrc file with the GitHub credentials.\n\nThe .netrc file is created in the root directory of the container.").
							WithArg("username", dag.TypeDef().WithKind(dagger.StringKind)).
							WithArg("password", dag.TypeDef().WithKind(dagger.StringKind))).
					WithFunction(
						dag.Function("WithNewNetrcFileAsSecretGitHub",
							dag.TypeDef().WithObject("Gotest")).
							WithDescription("WithNewNetrcFileAsSecretGitHub creates a new .netrc file with the GitHub credentials.\n\nThe .netrc file is created in the root directory of the container.\nThe argument 'password' is a secret that is not exposed in the logs.").
							WithArg("username", dag.TypeDef().WithKind(dagger.StringKind)).
							WithArg("password", dag.TypeDef().WithObject("Secret"))).
					WithFunction(
						dag.Function("WithNewNetrcFileGitLab",
							dag.TypeDef().WithObject("Gotest")).
							WithDescription("WithNewNetrcFileGitLab creates a new .netrc file with the GitLab credentials.\n\nThe .netrc file is created in the root directory of the container.").
							WithArg("username", dag.TypeDef().WithKind(dagger.StringKind)).
							WithArg("password", dag.TypeDef().WithKind(dagger.StringKind))).
					WithFunction(
						dag.Function("WithNewNetrcFileAsSecretGitLab",
							dag.TypeDef().WithObject("Gotest")).
							WithDescription("WithNewNetrcFileAsSecretGitLab creates a new .netrc file with the GitLab credentials.\n\nThe .netrc file is created in the root directory of the container.\nThe argument 'password' is a secret that is not exposed in the logs.").
							WithArg("username", dag.TypeDef().WithKind(dagger.StringKind)).
							WithArg("password", dag.TypeDef().WithObject("Secret"))).
					WithFunction(
						dag.Function("WithPrivateGoPkg",
							dag.TypeDef().WithObject("Gotest")).
							WithDescription("WithPrivateGoPkg sets the GOPRIVATE environment variable.").
							WithArg("privateHost", dag.TypeDef().WithKind(dagger.StringKind))).
					WithFunction(
						dag.Function("WithGCCCompiler",
							dag.TypeDef().WithObject("Gotest")).
							WithDescription("WithGCCCompiler installs the GCC compiler and musl-dev package.")).
					WithFunction(
						dag.Function("WithGoTestSum",
							dag.TypeDef().WithObject("Gotest")).
							WithDescription("WithGoTestSum installs the gotestsum CLI.")).
					WithFunction(
						dag.Function("WithGitInstalled",
							dag.TypeDef().WithObject("Gotest")).
							WithDescription("WithGitInstalled installs the Git version control system in the target container.\n\nThis method is equivalent to running `apk add --no-cache git` on an Alpine-based container.\nIt modifies the container instance by adding Git, thus making\nGit available for any subsequent operations within the container.\n\nUsage example:\n\n\tgotestInstance := &Gotest{}\n\tgotestInstance = gotestInstance.WithGitInstalled()\n\nReturns the modified `Gotest` instance.")).
					WithFunction(
						dag.Function("SetupGoTest",
							dag.TypeDef().WithObject("Container")).
							WithDescription("SetupGoTest sets up the go test options, to either evaluate the container and run the test,\nor return the container to be evaluated later.").
							WithArg("src", dag.TypeDef().WithObject("Directory"), dagger.FunctionWithArgOpts{Description: "The directory containing code to test."}).
							WithArg("packages", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.StringKind)).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Packages to test."}).
							WithArg("enableVerbose", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "enableVerbose is a flag to run tests with -v."}).
							WithArg("race", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "race is a flag to run tests with"}).
							WithArg("testFlags", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.StringKind)).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Arbitrary flags to pass along to go test."}).
							WithArg("insecureRootCapabilities", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Whether to run tests insecurely, i.e. with special privileges."}).
							WithArg("enableNest", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Enable experimental Dagger nesting. It sets the ExperimentalPrivilegedNesting option in Dagger."}).
							WithArg("enableCache", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "enableCache is a flag to enable cache volumes. If it's set, it'll\nenable the cache volumes for the Go module and build cache."}).
							WithArg("envVars", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.StringKind)).WithOptional(true), dagger.FunctionWithArgOpts{Description: "envVars is a list of environment variables with the format \"SOMETHING=SOMETHING,SOMETHING=SOMETHING\"."}).
							WithArg("printEnvVars", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "printEnvVars is a flag to print the environment variables"})).
					WithFunction(
						dag.Function("SetupGoTestSum",
							dag.TypeDef().WithObject("Container")).
							WithDescription("SetupGoTestSum sets up the go test options, to either evaluate the container and run the test,\nor return the container to be evaluated later.").
							WithArg("src", dag.TypeDef().WithObject("Directory"), dagger.FunctionWithArgOpts{Description: "The directory containing code to test."}).
							WithArg("packages", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.StringKind)).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Packages to test."}).
							WithArg("testFlags", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.StringKind)).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Arbitrary flags to pass along to go test."}).
							WithArg("goTestSumFlags", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.StringKind)).WithOptional(true), dagger.FunctionWithArgOpts{Description: "goTestSumFlags is a flag to pass along to go test -json."}).
							WithArg("format", dag.TypeDef().WithKind(dagger.StringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "format defines the option for the GoTestsum format to display"}).
							WithArg("insecureRootCapabilities", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Whether to run tests insecurely, i.e. with special privileges."}).
							WithArg("enableNest", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Enable experimental Dagger nesting. It sets the ExperimentalPrivilegedNesting option in Dagger."}).
							WithArg("enableCache", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "enableCache is a flag to enable cache volumes. If it's set, it'll\nenable the cache volumes for the Go module and build cache."}).
							WithArg("enablePretty", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "enablePretty is a flag to enable pretty output."}).
							WithArg("envVars", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.StringKind)).WithOptional(true), dagger.FunctionWithArgOpts{Description: "envVars is a list of environment variables to set with the format \"SOMETHING=SOMETHING,SOMETHING=SOMETHING\"."}).
							WithArg("printEnvVars", dag.TypeDef().WithKind(dagger.BooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "printEnvVars is a flag to print the environment variables"})).
					WithField("Src", dag.TypeDef().WithObject("Directory"), dagger.TypeDefWithFieldOpts{Description: "Src is the directory that contains all the source code, including the module directory."}).
					WithField("Ctr", dag.TypeDef().WithObject("Container"), dagger.TypeDefWithFieldOpts{Description: "Ctr is the container to use as a base container."}).
					WithConstructor(
						dag.Function("New",
							dag.TypeDef().WithObject("Gotest")).
							WithDescription("New creates a new Gotest module.").
							WithArg("version", dag.TypeDef().WithKind(dagger.StringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "version is the version of the GoReleaser to use, e.g., \"v1.22.0\"."}).
							WithArg("image", dag.TypeDef().WithKind(dagger.StringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "image is the image to use as the base container."}).
							WithArg("ctr", dag.TypeDef().WithObject("Container").WithOptional(true), dagger.FunctionWithArgOpts{Description: "Ctrl is the container to use as a base container."}).
							WithArg("envVarsFromHost", dag.TypeDef().WithKind(dagger.StringKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "EnvVarsFromHost is a list of environment variables to pass from the host to the container.\nLater on, in order to pass it to the container, it's going to be converted into a map."}))), nil
	default:
		return nil, fmt.Errorf("unknown object %s", parentName)
	}
}
